{
	"info": {
		"_postman_id": "9c748cdd-0aa4-4b6b-9ea5-cd017a43e424",
		"name": "GIS Web Application - Renewable Energy Resources",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22138681",
		"_collection_link": "https://planetsoft-praksa.postman.co/workspace/PlanetSoft-Praksa~956f6ba2-8396-4d09-b89d-9674dc9b8008/collection/22138681-9c748cdd-0aa4-4b6b-9ea5-cd017a43e424?action=share&creator=22138681&source=collection_link"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful registration\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201)\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set('ID', jsonData.id);\r",
									"/* pm.collectionVariables.set('name', jsonData.name);\r",
									"pm.collectionVariables.set('email', jsonData.email); */\r",
									"tests['Verify response has correct \"email\" value'] = jsonData.email === pm.collectionVariables.get('email')\r",
									"tests['Collection variable \"ID\" has been set'] = pm.collectionVariables.get('ID') === jsonData[\"id\"];\r",
									"tests['Collection variable \"email\" has been set'] = pm.collectionVariables.get('email') === jsonData[\"email\"];"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let random = (Math.random() + 1).toString(36).substring(7);\r",
									"let userEmail = random + \"_test@mail.com\"\r",
									"\r",
									"pm.collectionVariables.set(\"email\", userEmail);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "password_confirm",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "first_name",
									"value": "Test",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "User",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/users/register/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register missing parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed Registration bad syntax\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400)\r",
									"});\r",
									"const responseJSON = JSON.parse(responseBody);\r",
									"tests['Response contains \"email\" property'] = responseJSON.hasOwnProperty('email');\r",
									"tests['Response contains \"password\" property'] = responseJSON.hasOwnProperty('password');\r",
									"tests['Response contains \"password_confirm\" property'] = responseJSON.hasOwnProperty('password_confirm')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								},
								{
									"key": "password_confirm",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/users/register/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"register",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Login\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"});\r",
									"\r",
									"const responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"tests['Response contains \"refresh\" property'] = responseJSON.hasOwnProperty('refresh');\r",
									"tests['Response contains \"access\" property'] = responseJSON.hasOwnProperty('access')\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test@testmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Lozinka123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/users/login/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login and Remember Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful Login\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"});\r",
									"\r",
									"const responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"tests['Response contains \"refresh\" property'] = responseJSON.hasOwnProperty('refresh');\r",
									"tests['Response contains \"access\" property'] = responseJSON.hasOwnProperty('access')\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set('token', jsonData.access);\r",
									"\r",
									"tests['Collection variable \"token\" has been set'] = pm.collectionVariables.get('token') === jsonData[\"access\"];\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/users/login/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login missing parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed Login bad syntax\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400)\r",
									"});\r",
									"const responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"tests['Response contains \"email\" property'] = responseJSON.hasOwnProperty('email');\r",
									"tests['Response contains \"password\" property'] = responseJSON.hasOwnProperty('password')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/users/login/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with incorrect credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed Login, unauthorized\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401)\r",
									"})\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"tests['Response contains error message'] = jsonData.detail === \"No active account found with the given credentials\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "wrongemail@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "wrongpassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/users/login/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Settings",
			"item": [
				{
					"name": "User status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"tests['Verify response has correct \"email\" value'] = jsonData.email === pm.collectionVariables.get('email')\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}/users/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful password change\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"old_password\": \"{{password}}\",\r\n    \"password\": \"{{newpassword}}\",\r\n    \"password_repeated\": \"{{newpassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users/change_password/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"change_password",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password missing parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed change password\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400)\r",
									"});\r",
									"const responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"tests['Response contains \"old_password\" property'] = responseJSON.hasOwnProperty('old_password');\r",
									"tests['Response contains \"password\" property'] = responseJSON.hasOwnProperty('password')\r",
									"tests['Response contains \"password_repeated\" property'] = responseJSON.hasOwnProperty('password_repeated')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "old_password",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								},
								{
									"key": "password_repeated",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/users/change_password/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"change_password",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid/expired token\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401)\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"tests['Response contains error message'] = jsonData.detail === \"Given token not valid for any token type\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc4MTgxODUwLCJpYXQiOjE2NzgxODE1NTAsImp0aSI6ImVlOTMxYjhhZjUxNzQ2YTI4OTM1Y2YwNmQ0NjgxNTcyIiwidXNlcl9pZCI6MzN9.g_0brY3V0x-G0XddKpZgWQ64i_01EjMV4__qui_BFd0",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"old_password\": \"test321Dragana\",\r\n    \"password\": \"Planetsoft567\",\r\n    \"password_repeated\": \"Planetsoft567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users/change_password/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"change_password",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Energy Resources",
			"item": [
				{
					"name": "Wind Farm",
					"item": [
						{
							"name": "Create Wind Farm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created wind farm\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set('WFID', jsonData.id);\r",
											"tests['Collection variable \"WFID\" has been set'] = pm.collectionVariables.get('WFID') === jsonData[\"id\"];\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": \"RS\",\r\n    \"city\": \"Banja Luka\",\r\n    \"elevation\": {{elevation}},\r\n    \"power_energy\": \"500.00000\",\r\n    \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [\r\n      -123.4194,\r\n      38.7749\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wind Farm unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Failed to create wind farm\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"tests['Response contains error message'] = jsonData.detail === \"Given token not valid for any token type\"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "invalid",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": 1,\r\n    \"city\": \"Banja Luka\",\r\n    \"elevation\": \"12.345\",\r\n    \"power_energy\": \"400\",\r\n    \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [\r\n      -123.4194,\r\n      38.7749\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wind Farm invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Failed to create Wind Farm\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error message for entity is correct\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json().entity).to.deep.equal([\"\\\"5\\\" is not a valid choice.\"]);\r",
											"});\r",
											"pm.test(\"Elevation valid number input is required error\", function() {\r",
											"    pm.expect(pm.response.json().elevation).to.deep.equal([\"A valid number is required.\"]);\r",
											"});\r",
											"pm.test(\"Power energy valid number input is required error\", function() {\r",
											"    pm.expect(pm.response.json().power_energy).to.deep.equal([\"A valid number is required.\"]);\r",
											"});\r",
											"pm.test(\"Geometry invalid input error message\", function() {\r",
											"    pm.expect(pm.response.json().geometry).to.deep.equal([\"Unable to convert to python object: String input unrecognized as WKT EWKT, and HEXEWKB.\"]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": 5,\r\n    \"city\": \"12345\",\r\n    \"elevation\": \"invalid input\",\r\n    \"power_energy\": \"invalid input\",\r\n    \"geometry\": \"invalid geojson\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wind Farm missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Fails to create wind farm\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400)\r",
											"});\r",
											"const responseJSON = JSON.parse(responseBody);\r",
											"tests['Response contains \"entity\" property'] = responseJSON.hasOwnProperty('entity');\r",
											"tests['Response contains \"city\" property'] = responseJSON.hasOwnProperty('city');\r",
											"tests['Response contains \"elevation\" property'] = responseJSON.hasOwnProperty('elevation');\r",
											"tests['Response contains \"power_energy\" property'] = responseJSON.hasOwnProperty('power_energy');\r",
											"tests['Response contains \"geometry\" property'] = responseJSON.hasOwnProperty('geometry');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "entity",
											"value": "",
											"type": "text"
										},
										{
											"key": "city",
											"value": "",
											"type": "text"
										},
										{
											"key": "elevation",
											"value": "",
											"type": "text"
										},
										{
											"key": "power_energy",
											"value": "",
											"type": "text"
										},
										{
											"key": "geometry",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List Wind Farms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully list all Wind Farms\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"const targetId = parseInt(pm.collectionVariables.get('WFID'));\r",
											"const geojson = pm.response.json();\r",
											"\r",
											"let foundFeature;\r",
											"for (const feature of geojson.features) {\r",
											"  \r",
											"  if (feature.id === targetId) {\r",
											"    console.log('Found feature:', feature);\r",
											"    foundFeature = feature;\r",
											"    break;\r",
											"  }\r",
											"}\r",
											"pm.test(\"Feature with ID \" + targetId + \" was found\", function() {\r",
											"  pm.expect(foundFeature).to.not.be.undefined;\r",
											"  pm.expect(foundFeature).to.deep.equal(pm.response.json().features.find(feature => feature.id === targetId));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Language",
										"value": "sr-Latn",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{URL}}/resources/wind_farms/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Wind Farm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wind Farm is updated, status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json()\r",
											"pm.test(\"Verify that the 'owner' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.owner).to.eql(pm.collectionVariables.get(\"owner\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'manufactured' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.manufactured).to.eql(pm.collectionVariables.get(\"manufacturer\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'note' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.note).to.eql(pm.collectionVariables.get(\"note\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'zone' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.zone).to.deep.eql(pm.collectionVariables.get(\"zone\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'power_energy' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.power_energy).to.deep.eql(pm.collectionVariables.get(\"power\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'elevation' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.elevation).to.deep.eql(pm.collectionVariables.get(\"elevation\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'city' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.city).to.eql(pm.collectionVariables.get(\"city\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'canton' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.canton).to.eql(pm.collectionVariables.get(\"canton\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'entity' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.entity).to.eql(pm.collectionVariables.get(\"entity\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'wind_direction' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.wind_direction).to.eql(pm.collectionVariables.get(\"wind_direction\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'geometry' property has been updated\", function() {\r",
											"    pm.expect(jsonData.geometry).to.eql(JSON.parse(pm.collectionVariables.get(\"geometry\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "owner",
											"value": "{{owner}}",
											"type": "text"
										},
										{
											"key": "manufactured",
											"value": "{{manufacturer}}",
											"type": "text"
										},
										{
											"key": "note",
											"value": "{{note}}",
											"type": "text"
										},
										{
											"key": "zone",
											"value": "{{zone}}",
											"type": "text"
										},
										{
											"key": "power_energy",
											"value": "{{power}}",
											"type": "text"
										},
										{
											"key": "elevation",
											"value": "{{elevation}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "{{city}}",
											"type": "text"
										},
										{
											"key": "entity",
											"value": "{{entity}}",
											"type": "text"
										},
										{
											"key": "canton",
											"value": "{{canton}}",
											"type": "text"
										},
										{
											"key": "wind_direction",
											"value": "{{wind_direction}}",
											"type": "text"
										},
										{
											"key": "document",
											"type": "file",
											"src": "/C:/Users/pc/Desktop/energyresource.txt"
										},
										{
											"key": "geometry",
											"value": "{{geometry}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms/{{WFID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										"{{WFID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Wind Farm unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Failed to update wind farm\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401)\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"tests['Response contains error message'] = jsonData.detail === \"Given token not valid for any token type\"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "invalid",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "owner",
											"value": "{{owner}}",
											"type": "text"
										},
										{
											"key": "manufactured",
											"value": "{{manufacturer}}",
											"type": "text"
										},
										{
											"key": "note",
											"value": "{{note}}",
											"type": "text"
										},
										{
											"key": "zone",
											"value": "{{zone}}",
											"type": "text"
										},
										{
											"key": "power_energy",
											"value": "{{power}}",
											"type": "text"
										},
										{
											"key": "elevation",
											"value": "{{elevation}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "{{city}}",
											"type": "text"
										},
										{
											"key": "canton",
											"value": "{{canton}}",
											"type": "text"
										},
										{
											"key": "entity",
											"value": "{{entity}}",
											"type": "text"
										},
										{
											"key": "wind_direction",
											"value": "{{wind_direction}}",
											"type": "text"
										},
										{
											"key": "document",
											"type": "file",
											"src": "/C:/Users/pc/Desktop/energyresource.txt"
										},
										{
											"key": "geometry",
											"value": "{{geometry}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms/{{WFID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										"{{WFID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Wind Farm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wind Farm properties updated, status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json()\r",
											"pm.test(\"Verify that the 'owner' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.owner).to.eql(pm.collectionVariables.get(\"owner\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'power_energy' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.power_energy).to.deep.eql(pm.collectionVariables.get(\"power\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "owner",
											"value": "{{owner}}",
											"type": "text"
										},
										{
											"key": "power_energy",
											"value": "{{power}}",
											"type": "text"
										},
										{
											"key": "document",
											"type": "file",
											"src": "/C:/Users/pc/Desktop/energyresource.txt"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms/{{WFID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										"{{WFID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wind Farm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wind Farm is deleted, status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/resources/wind_farms/{{WFID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms",
										"{{WFID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"   const jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"All objects have the specified entity property\", function () {\r",
											"for (let i = 0; i < jsonData.features.length; i++) {\r",
											"    const feature = jsonData.features[i];\r",
											"    pm.expect(feature.properties.entity).to.equal(pm.collectionVariables.get(\"entity\"));\r",
											"  }\r",
											"});\r",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms?entity={{entity}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms"
									],
									"query": [
										{
											"key": "entity",
											"value": "{{entity}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by Canton",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"   const jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"All objects have the specified canton property\", function () {\r",
											"for (let i = 0; i < jsonData.features.length; i++) {\r",
											"    const feature = jsonData.features[i];\r",
											"    pm.expect(feature.properties.canton).to.equal(pm.collectionVariables.get(\"canton\"));\r",
											"  }\r",
											"});\r",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "?entity",
											"value": "{{entity}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms?canton={{canton}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms"
									],
									"query": [
										{
											"key": "canton",
											"value": "{{canton}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by Zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"   const jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"All objects have the specified zone property\", function () {\r",
											"for (let i = 0; i < jsonData.features.length; i++) {\r",
											"    const feature = jsonData.features[i];\r",
											"    pm.expect(feature.properties.zone).to.equal(pm.collectionVariables.get(\"zone\"));\r",
											"    console.log(feature.properties.zone)\r",
											"  }\r",
											"});\r",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "?entity",
											"value": "{{entity}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/wind_farms?zone={{zone}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"wind_farms"
									],
									"query": [
										{
											"key": "zone",
											"value": "{{zone}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Solar Panel",
					"item": [
						{
							"name": "Create Solar Panel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successfully created solar panel\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.collectionVariables.set('SPID', jsonData.id);\r",
											"tests['Collection variable \"SPID\" has been set'] = pm.collectionVariables.get('SPID') === jsonData[\"id\"];\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": \"FBiH\",\r\n    \"canton\": \"KS\",\r\n    \"city\": \"Sarajevo\",\r\n    \"elevation\": {{elevation}},\r\n    \"power_field\": {{power}},\r\n    \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [\r\n      -123.4194,\r\n      38.7749\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Solar Panel invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error message for entity is correct\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json().entity).to.deep.equal([\"\\\"RSB\\\" is not a valid choice.\"]);\r",
											"});\r",
											"pm.test(\"Elevation valid number input is required error\", function() {\r",
											"    pm.expect(pm.response.json().elevation).to.deep.equal([\"A valid number is required.\"]);\r",
											"});\r",
											"pm.test(\"Power energy valid number input is required error\", function() {\r",
											"    pm.expect(pm.response.json().power_field).to.deep.equal([\"A valid number is required.\"]);\r",
											"});\r",
											"pm.test(\"Geometry invalid input error message\", function() {\r",
											"    pm.expect(pm.response.json().geometry).to.deep.equal([\"Unable to convert to python object: String input unrecognized as WKT EWKT, and HEXEWKB.\"]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\": \"RSB\",\r\n    \"city\": \"12345\",\r\n    \"elevation\": \"invalid input\",\r\n    \"power_field\": \"invalid input\",\r\n    \"geometry\": \"invalid geojson\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Solar Panel missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Fails to create wind farm\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400)\r",
											"});\r",
											"const responseJSON = JSON.parse(responseBody);\r",
											"tests['Response contains \"entity\" property'] = responseJSON.hasOwnProperty('entity');\r",
											"tests['Response contains \"city\" property'] = responseJSON.hasOwnProperty('city');\r",
											"tests['Response contains \"elevation\" property'] = responseJSON.hasOwnProperty('elevation');\r",
											"tests['Response contains \"power_field\" property'] = responseJSON.hasOwnProperty('power_field');\r",
											"tests['Response contains \"geometry\" property'] = responseJSON.hasOwnProperty('geometry');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "entity",
											"value": "",
											"type": "text"
										},
										{
											"key": "city",
											"value": "",
											"type": "text"
										},
										{
											"key": "elevation",
											"value": "",
											"type": "text"
										},
										{
											"key": "power_energy",
											"value": "",
											"type": "text"
										},
										{
											"key": "geometry",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List Solar Panels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful list\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"\r",
											"const targetId = parseInt(pm.collectionVariables.get('SPID'));\r",
											"const geojson = pm.response.json();\r",
											"\r",
											"let foundFeature;\r",
											"for (const feature of geojson.features) {\r",
											"  \r",
											"  if (feature.id === targetId) {\r",
											"    console.log('Found feature:', feature);\r",
											"    foundFeature = feature;\r",
											"    break;\r",
											"  }\r",
											"  \r",
											"}\r",
											"\r",
											"pm.test(\"Feature with ID \" + targetId + \" was found\", function() {\r",
											"  pm.expect(foundFeature).to.not.be.undefined;\r",
											"  pm.expect(foundFeature).to.deep.equal(pm.response.json().features.find(feature => feature.id === targetId));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/resources/solar_panels/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Solar Panel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wind Farm is updated, status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json()\r",
											"pm.test(\"Verify that the 'owner' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.owner).to.eql(pm.collectionVariables.get(\"owner\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'manufactured' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.manufactured).to.eql(pm.collectionVariables.get(\"manufacturer\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'note' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.note).to.eql(pm.collectionVariables.get(\"note\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'zone' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.zone).to.deep.eql(pm.collectionVariables.get(\"zone\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'power_field' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.power_field).to.deep.eql(pm.collectionVariables.get(\"power\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'elevation' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.elevation).to.deep.eql(pm.collectionVariables.get(\"elevation\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'city' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.city).to.eql(pm.collectionVariables.get(\"city\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'canton' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.canton).to.eql(pm.collectionVariables.get(\"canton\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'entity' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.entity).to.eql(pm.collectionVariables.get(\"entity\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'wind_direction' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.panel_degree).to.eql(pm.collectionVariables.get(\"panel_degree\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'geometry' property has been updated\", function() {\r",
											"    pm.expect(jsonData.geometry).to.eql(JSON.parse(pm.collectionVariables.get(\"geometry\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "owner",
											"value": "{{owner}}",
											"type": "text"
										},
										{
											"key": "manufactured",
											"value": "{{manufacturer}}",
											"type": "text"
										},
										{
											"key": "note",
											"value": "{{note}}",
											"type": "text"
										},
										{
											"key": "zone",
											"value": "{{zone}}",
											"type": "text"
										},
										{
											"key": "power_field",
											"value": "{{power}}",
											"type": "text"
										},
										{
											"key": "elevation",
											"value": "{{elevation}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "{{city}}",
											"type": "text"
										},
										{
											"key": "entity",
											"value": "{{entity}}",
											"type": "text"
										},
										{
											"key": "canton",
											"value": "{{canton}}",
											"type": "text"
										},
										{
											"key": "panel_degree",
											"value": "{{panel_degree}}",
											"type": "text"
										},
										{
											"key": "document",
											"type": "file",
											"src": "/C:/Users/pc/Desktop/energyresource.txt"
										},
										{
											"key": "geometry",
											"value": "{{geometry}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels/{{SPID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels",
										"{{SPID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Solar Panel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json()\r",
											"pm.test(\"Verify that the 'owner' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.owner).to.eql(pm.collectionVariables.get(\"owner\"));\r",
											"});\r",
											"pm.test(\"Verify that the 'power_field' property has been updated\", function() {\r",
											"    pm.expect(jsonData.properties.power_field).to.deep.eql(pm.collectionVariables.get(\"power\")) \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "owner",
											"value": "{{owner}}",
											"type": "text"
										},
										{
											"key": "power_energy",
											"value": "{{power}}",
											"type": "text"
										},
										{
											"key": "document",
											"type": "file",
											"src": "/C:/Users/pc/Desktop/energyresource.txt",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels/{{SPID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels",
										"{{SPID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Solar Panel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{URL}}/resources/solar_panels/{{SPID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels",
										"{{SPID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"   const jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"All objects have the specified entity property\", function () {\r",
											"for (let i = 0; i < jsonData.features.length; i++) {\r",
											"    const feature = jsonData.features[i];\r",
											"    pm.expect(feature.properties.entity).to.equal(pm.collectionVariables.get(\"entity\"));\r",
											"  }\r",
											"});\r",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "?entity",
											"value": "{{entity}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels?entity={{entity}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels"
									],
									"query": [
										{
											"key": "entity",
											"value": "{{entity}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by Canton",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"   const jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"All objects have the specified canton property\", function () {\r",
											"for (let i = 0; i < jsonData.features.length; i++) {\r",
											"    const feature = jsonData.features[i];\r",
											"    pm.expect(feature.properties.canton).to.equal(pm.collectionVariables.get(\"canton\"));\r",
											"  }\r",
											"});\r",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "?canton",
											"value": "{{canton}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels?canton={{canton}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels"
									],
									"query": [
										{
											"key": "canton",
											"value": "{{canton}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter by Zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"   const jsonData = pm.response.json()\r",
											"\r",
											"pm.test(\"All objects have the specified zone property\", function () {\r",
											"for (let i = 0; i < jsonData.features.length; i++) {\r",
											"    const feature = jsonData.features[i];\r",
											"    pm.expect(feature.properties.zone).to.equal(pm.collectionVariables.get(\"zone\"));\r",
											"  }\r",
											"});\r",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "?entity",
											"value": "{{entity}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/resources/solar_panels?zone={{zone}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"solar_panels"
									],
									"query": [
										{
											"key": "zone",
											"value": "{{zone}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List Cantons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Each response object has id, acronym, and name \", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    for (const obj of jsonData) {\r",
									"        \r",
									"        pm.expect(obj).to.have.property(\"code\");\r",
									"        pm.expect(obj).to.have.property(\"name\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "Sr-Latn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/choices/cantons/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"choices",
								"cantons",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List Entities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Each response object has id, acronym, and name \", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    for (const obj of jsonData) {\r",
									"        pm.expect(obj).to.have.property(\"code\");\r",
									"        pm.expect(obj).to.have.property(\"name\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "Sr-Latn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/choices/entites/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"choices",
								"entites",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List Zones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Each response object has id, acronym, and name \", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    for (const obj of jsonData) {\r",
									"        pm.expect(obj).to.have.property(\"code\");\r",
									"        pm.expect(obj).to.have.property(\"name\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "Sr-Latn",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}/choices/zones/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"choices",
								"zones",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Import Shapefile",
			"item": [
				{
					"name": "Import Wind Farm unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to import wind farm token not valid\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401)\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"tests['Response contains error message'] = jsonData.detail === \"Given token not valid for any token type\"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "broken",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "Import shapefile",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{URL}}/resources/import_shape_file/wind_farms/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resources",
								"import_shape_file",
								"wind_farms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Solar Panel unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to import wind farm token not valid\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401)\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"tests['Response contains error message'] = jsonData.detail === \"Given token not valid for any token type\"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "broken",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/resources/import_shape_file/solar_panels/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resources",
								"import_shape_file",
								"solar_panels",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Wind Farm invalid file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to import Wind Farm invalid file format\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400)\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"tests['Response contains error message'] = jsonData.detail === \"Uploaded file is not zip\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shapefile",
									"type": "file",
									"src": "/C:/Users/pc/Desktop/updateddocument.txt"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/resources/import_shape_file/wind_farms/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resources",
								"import_shape_file",
								"wind_farms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Wind Farm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shapefile",
									"type": "file",
									"src": "/C:/Users/pc/Desktop/wind_farm.zip"
								},
								{
									"key": "srid",
									"value": "2000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/resources/import_shape_file/wind_farms/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resources",
								"import_shape_file",
								"wind_farms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Solar Panel invalid file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Failed to import Solar Panel invalid file format\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400)\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"tests['Response contains error message'] = jsonData.detail === \"Uploaded file is not zip\""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shapefile",
									"type": "file",
									"src": "/C:/Users/pc/Desktop/updateddocument.txt"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/resources/import_shape_file/solar_panels/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resources",
								"import_shape_file",
								"solar_panels",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Import Solar Panel",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "shapefile",
									"type": "file",
									"src": "/C:/Users/pc/Desktop/broken/mandatory_fields.zip"
								},
								{
									"key": "srid",
									"value": "2000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/resources/import_shape_file/solar_panels/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resources",
								"import_shape_file",
								"solar_panels",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "ID",
			"value": "33",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc5NjY0NjUyLCJpYXQiOjE2Nzk2NTc0NTIsImp0aSI6IjVkNjhiNDJiM2MwODRlMWVhNWM3ZjljOTZiYjMzZmZlIiwidXNlcl9pZCI6MTM2fQ.mTyiCMJtH3obZ3Om4uotq4P-VQj5sDq0lJuOXLHZz7Q",
			"type": "string"
		},
		{
			"key": "email",
			"value": "x6x58_test@mail.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Lozinka123",
			"type": "string"
		},
		{
			"key": "newpassword",
			"value": "NewTestPass321"
		},
		{
			"key": "WFID",
			"value": "30",
			"type": "string"
		},
		{
			"key": "owner",
			"value": "Tester"
		},
		{
			"key": "power",
			"value": "555.00000"
		},
		{
			"key": "SPID",
			"value": "",
			"type": "string"
		},
		{
			"key": "manufacturer",
			"value": "Test manufacture"
		},
		{
			"key": "note",
			"value": "test note"
		},
		{
			"key": "elevation",
			"value": "150"
		},
		{
			"key": "city",
			"value": "Doboj"
		},
		{
			"key": "entity",
			"value": "FBIH"
		},
		{
			"key": "zone",
			"value": "U"
		},
		{
			"key": "wind_direction",
			"value": "test direction"
		},
		{
			"key": "geometry",
			"value": "test"
		},
		{
			"key": "canton",
			"value": "TK"
		},
		{
			"key": "panel_degree",
			"value": "20.00000"
		}
	]
}